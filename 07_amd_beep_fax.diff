diff --git a/asterisk/include/asterisk/dsp_tone.h b/asterisk/include/asterisk/dsp_tone.h
index e69de29..602517e 100644
--- a/asterisk/include/asterisk/dsp_tone.h
+++ b/asterisk/include/asterisk/dsp_tone.h
@@ -0,0 +1,48 @@
+/*
+ * dsp_tone.h
+ *
+ *  Created on: 11-07-2013
+ *      Author: gg
+ */
+
+#ifndef DSP_TONE_H_
+#define DSP_TONE_H_
+
+typedef struct {
+	/*! The previous previous sample calculation (No binary point just plain int) */
+	int v2;
+	/*! The previous sample calculation (No binary point just plain int) */
+	int v3;
+	/*! v2 and v3 power of two exponent to keep value in int range */
+	int chunky;
+	/*! 15 bit fixed point goertzel coefficient = 2 * cos(2 * pi * freq / sample_rate) */
+	int fac;
+} goertzel_state_t;
+
+typedef struct {
+	int value;
+	int power;
+} goertzel_result_t;
+
+typedef struct {
+	int freq;
+	int block_size;
+	int squelch;		/* Remove (squelch) tone */
+	goertzel_state_t tone;
+	float energy;		/* Accumulated energy of the current block */
+	float last_energy; /* Accumulated energy of the last full block*/
+	int samples_pending;	/* Samples remain to complete the current block */
+	int mute_samples;	/* How many additional samples needs to be muted to suppress already detected tone */
+
+	int hits_required;	/* How many successive blocks with tone we are looking for */
+	float threshold;	/* Energy of the tone relative to energy from all other signals to consider a hit */
+
+	int hit_count;		/* How many successive blocks we consider tone present */
+	int last_hit;		/* Indicates if the last processed block was a hit */
+
+} tone_detect_state_t;
+
+int ast_tone_detect (struct ast_dsp *dsp, tone_detect_state_t *s, int16_t *amp, int samples, float minenergy);
+void ast_tone_detect_initialize(tone_detect_state_t *s, int freq, int duration, int amp);
+
+#endif /* DSP_TONE_H_ */
diff --git a/asterisk/main/dsp.c b/asterisk/main/dsp.c
index 840a839..245f654 100644
--- a/asterisk/main/dsp.c
+++ b/asterisk/main/dsp.c
@@ -69,6 +69,7 @@ ASTERISK_FILE_VERSION(__FILE__, "$Revision$")
 #include "asterisk/options.h"
 #include "asterisk/config.h"
 #include "asterisk/test.h"
+#include "asterisk/dsp_tone.h"
 
 /*! Number of goertzels for progress detect */
 enum gsamp_size {
@@ -238,6 +239,7 @@ static const int DEFAULT_SILENCE_THRESHOLD = 256;
 
 #define CONFIG_FILE_NAME "dsp.conf"
 
+#if 0
 typedef struct {
 	/*! The previous previous sample calculation (No binary point just plain int) */
 	int v2;
@@ -271,6 +273,7 @@ typedef struct
 	int last_hit;		/* Indicates if the last processed block was a hit */
 
 } tone_detect_state_t;
+#endif
 
 typedef struct
 {
@@ -499,6 +502,10 @@ static void ast_tone_detect_init(tone_detect_state_t *s, int freq, int duration,
 	ast_debug(1, "Setup tone %d Hz, %d ms, block_size=%d, hits_required=%d\n", freq, duration, s->block_size, s->hits_required);
 }
 
+void ast_tone_detect_initialize(tone_detect_state_t *s, int freq, int duration, int amp) {
+    ast_tone_detect_init(s, freq, duration, amp, DEFAULT_SAMPLE_RATE);
+}
+
 static void ast_fax_detect_init(struct ast_dsp *s)
 {
 	ast_tone_detect_init(&s->cng_tone_state, FAX_TONE_CNG_FREQ, FAX_TONE_CNG_DURATION, FAX_TONE_CNG_DB, s->sample_rate);
@@ -597,8 +604,9 @@ static int tone_detect(struct ast_dsp *dsp, tone_detect_state_t *s, int16_t *amp
 		/* Scale to make comparable */
 		tone_energy *= 2.0;
 		s->energy *= s->block_size;
+        s->last_energy = s->energy;
 
-		ast_debug(10, "%d Hz tone %2d Ew=%.4E, Et=%.4E, s/n=%10.2f\n", s->freq, s->hit_count, tone_energy, s->energy, tone_energy / (s->energy - tone_energy));
+        ast_debug(10, "%d Hz tone %2d Ew=%.4E, Et=%.4E, s/n=%10.2f\n", s->freq, s->hit_count, tone_energy, s->energy, tone_energy / (s->energy - tone_energy));
 		hit = 0;
 		if (TONE_THRESHOLD <= tone_energy
 			&& tone_energy > s->energy * s->threshold) {
@@ -659,6 +667,14 @@ static int tone_detect(struct ast_dsp *dsp, tone_detect_state_t *s, int16_t *amp
 	return res;
 }
 
+int ast_tone_detect (struct ast_dsp *dsp, tone_detect_state_t *s, int16_t *amp, int samples, float minenergy){
+    int ret;
+    ret=tone_detect(dsp, s,  amp,  samples);
+    if (ret>0) ast_log(LOG_NOTICE, "Channel energy: %f\n",s->last_energy);
+    if (s->last_energy > minenergy) return ret; else return 0;
+    return ret;
+}
+
 static void store_digit(digit_detect_state_t *s, char digit)
 {
 	s->detected_digits++;
