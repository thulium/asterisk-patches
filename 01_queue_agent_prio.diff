--- a/asterisk/apps/app_queue.c	2021-01-22 15:16:17.640093302 +0000
+++ b/asterisk/apps/app_queue.c	2021-01-22 15:22:55.908356357 +0000
@@ -1498,6 +1498,10 @@
 /*! \brief name of the ringinuse field in the realtime database */
 static char *realtime_ringinuse_field;
 
+static int checkotherpenalties=1;
+
+static int checklongestwaiting=1;
+
 enum queue_result {
 	QUEUE_UNKNOWN = 0,
 	QUEUE_TIMEOUT = 1,
@@ -1749,6 +1753,8 @@
 	int autopause;                      /*!< Auto pause queue members if they fail to answer */
 	int autopausedelay;                 /*!< Delay auto pause for autopausedelay seconds since last call */
 	int timeoutpriority;                /*!< Do we allow a fraction of the timeout to occur for a ring? */
+	int checkotherpenalties;
+	int checklongestwaiting;
 
 	/* Queue strategy things */
 	int rrpos;                          /*!< Round Robin - position */
@@ -2801,6 +2807,8 @@
 	q->leavewhenempty = 0;
 	q->memberdelay = 0;
 	q->weight = 0;
+	q->checkotherpenalties = checkotherpenalties;
+	q->checklongestwaiting = checklongestwaiting;
 	q->timeoutrestart = 0;
 	q->periodicannouncefrequency = 0;
 	q->randomperiodicannounce = 0;
@@ -3326,6 +3334,10 @@
 		q->memberdelay = atoi(val);
 	} else if (!strcasecmp(param, "weight")) {
 		q->weight = atoi(val);
+	} else if (!strcasecmp(param, "checkotherpenalties")) {
+		q->checkotherpenalties = atoi(val);
+	} else if (!strcasecmp(param, "checklongestwaiting")) {
+		q->checklongestwaiting = atoi(val);
 	} else if (!strcasecmp(param, "timeoutrestart")) {
 		q->timeoutrestart = ast_true(val);
 	} else if (!strcasecmp(param, "defaultrule")) {
@@ -4354,6 +4366,64 @@
 	return found;
 }
 
+/* traverse all defined queues which have calls waiting and contain this member
+   return 0 if member has higher or equal penalty in other queues or 1 otherwise  */
+static int compare_agent_prio(struct call_queue *rq, struct member *member, time_t rqstart)
+{
+	struct call_queue *q;
+	struct member *mem;
+	int found = 0;
+	struct ao2_iterator queue_iter;
+    struct queue_ent *qe;
+    time_t qstart;
+    time_t now;
+    
+    /* find out when the first caller started to wait*/
+    time(&now);
+    qstart=now;
+	queue_iter = ao2_iterator_init(queues, 0);
+	while ((q = ao2_t_iterator_next(&queue_iter, "Iterate through queues"))) {
+		if (q == rq) { /* don't check myself, could deadlock */
+			queue_t_unref(q, "Done with iterator");
+			continue;
+		}
+		ao2_lock(q);
+		if (q->count && q->members) {
+			if ((mem = ao2_find(q->members, member, OBJ_POINTER))) {
+				ast_debug(1, "CAP: Found matching member %s in queue '%s'\n", mem->interface, q->name);
+				if (member->penalty > mem->penalty && rq->weight <= q->weight) {
+					ast_debug(1, "CAP: Queue '%s' (penalty %d, calls %d) is preferred over '%s' (penalty %d, calls %d)\n", q->name, mem->penalty, q->count, rq->name, member->penalty, rq->count);
+					found = 1;
+				}
+				if (rq->checklongestwaiting && member->penalty == mem->penalty && rq->weight == q->weight) {
+                    qe=q->head;
+
+                    while (qe)  {
+                        if (!qe->pending && qe->start < rqstart)
+                            {
+                                qstart=qe->start;
+                            }
+                        qe = qe->next;
+                    };
+                    ast_debug(1, "CAP: Queue '%s' (wait %d, calls %d) VS '%s' (wait %d, calls %d)\n", q->name, (int)(now-qstart), q->count, rq->name, (int)(now-rqstart), rq->count);
+                    if (qstart<rqstart){
+                        ast_debug(1, "CAP: Queue '%s' (wait %d, calls %d) is preferred over '%s' (wait %d, calls %d)\n", q->name, (int)(now-qstart), q->count, rq->name, (int)(now-rqstart), rq->count);
+                        found = 1;
+                    };
+				}
+				ao2_ref(mem, -1);
+			}
+		}
+		ao2_unlock(q);
+		queue_t_unref(q, "Done with iterator");
+		if (found) {
+			break;
+		}
+	}
+	ao2_iterator_destroy(&queue_iter);
+	return found;
+}
+
 /*! \brief common hangup actions */
 static void do_hang(struct callattempt *o)
 {
@@ -4417,6 +4487,12 @@
 			qe->parent->name, call->interface);
 		return 0;
 	}
+
+	if ( qe->parent->checkotherpenalties &&  compare_agent_prio(qe->parent, memberp, qe->start)) {
+		ast_debug(1, "CAP: Priority queue delaying call to %s:%s\n",
+		qe->parent->name, call->interface);
+		return 0;
+	}
 
 	if (!memberp->ringinuse) {
 		struct member *mem;
@@ -9224,6 +9300,14 @@
 	if ((general_val = ast_variable_retrieve(cfg, "general", "log_membername_as_agent"))) {
 		log_membername_as_agent = ast_true(general_val);
 	}
+	checkotherpenalties = 1;
+	if ((general_val = ast_variable_retrieve(cfg, "general", "checkotherpenalties"))) {
+		checkotherpenalties = ast_true(general_val);
+	}
+	checklongestwaiting = 1;
+	if ((general_val = ast_variable_retrieve(cfg, "general", "checklongestwaiting"))) {
+		checklongestwaiting = ast_true(general_val);
+	}
 }
 
 /*! \brief reload information pertaining to a single member
@@ -9666,8 +9750,9 @@
 		sl2 =100 * (((float)q->callsabandonedinsl + (float)q->callscompletedinsl) / ((float)q->callsabandoned + (float)q->callscompleted));
 	}
 
-	ast_str_append(&out, 0, ") in '%s' strategy (%ds holdtime, %ds talktime), W:%d, C:%d, A:%d, SL:%2.1f%%, SL2:%2.1f%% within %ds",
-		int2strat(q->strategy), q->holdtime, q->talktime, q->weight, q->callscompleted, q->callsabandoned, sl, sl2, q->servicelevel);
+	ast_str_append(&out, 0, ") in '%s' strategy (%ds holdtime, %ds talktime), W:%d, COP: %d, CLW: %d, C:%d, A:%d, SL:%2.1f%% within %ds",
+		int2strat(q->strategy), q->holdtime, q->talktime, q->weight, q->checkotherpenalties, q->checklongestwaiting,
+ 		q->callscompleted, q->callsabandoned,sl,q->servicelevel);
 	do_print(s, fd, ast_str_buffer(out));
 	if (!ao2_container_count(q->members)) {
 		do_print(s, fd, "   No Members");
